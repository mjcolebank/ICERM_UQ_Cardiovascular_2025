% run_cardiovascular.m
% Author: Mitchel J. Colebank
% Script for MATH 728: UQ for Phys and Biol Sys
% Date created: January, 2025
%
% Defines initial conditions, model parameters, and other components needed
% to solve the 2-component cardiovascular model.
close all; clear; clc;
addpath('../Project0_UQMethods/')
param_names = {'P LA', 'P SysCap', 'Rmv', 'Rav', 'Rart', 'Cao', 'Emax', 'Emin', 'Vlvd', 'T peak', 'T relax', 'T'};
%%
[IC, param] = get_CV_parameters();
T = param(12);
load('CV_test_data.mat','data')
% Starting and ending time
tstart = 0;
tend   = 20.*T; % 30 cycles
dt = 1e-3;
tspace = tstart:dt:tend;
param_base = log(param);
%% Run active subspaces depending on the quantity of interest
f = @(q) act_subspace_f(q,IC,tspace,4,data);
param_ids = [1:11];%1:11; % Exclude the cardiac cycle length;
UB = param_base.*1.2;
LB = param_base.*0.8;
% LB(4) = param(4).*0.95;
% UB(4) = param(4).*1.05;
M = 100;
Ny = 1;
CS_flag = 0; % Use complex step, otherwise use centered finite difference
parallel_flag=0;
[G_f,Lambda,W,act_scores] = ActiveSubspace_SVD_Algorithm(f,UB,LB,M,Ny,CS_flag,param_ids,param_base,parallel_flag);
%%

figure(10);clf;
subplot(1,2,1);
bar(diag(Lambda)./max(diag(Lambda)));
xticks(1:length(param_ids));
title('Eigenvalues/Singular Values'); grid on;
set(gca,'FontSize',20);

subplot(1,2,2);
bar(act_scores./max(act_scores))
xticks(1:length(param_ids));
xticklabels(param_names(param_ids));
title('Activity Scores'); grid on;
set(gca,'FontSize',20);

%% See if we can't find a reduced subset capable of predicting the QoI
theta0 = param(param_ids)';
r = 2;
n_train = 500;
act_subspace = @(theta) W(:,1:r)'*theta;


x_train = zeros(r,n_train);
y_train = zeros(1,n_train);


lhs_samp = lhsdesign(n_train,length(param_ids));
par_train = LB(param_ids)+(UB(param_ids)-LB(param_ids)).*lhs_samp;
for j=1:n_train
    par_eval = param_base; par_eval(param_ids) = par_train(j,:);
    y_train(j) = f(par_eval);

    x_train(:,j) = act_subspace(par_train(j,:)');
end
if r==1
    [x_train,sort_ID] = sort(x_train);
    y_train = y_train(sort_ID);
end


X_poly = [ones(1,n_train); x_train; x_train.^2; x_train.^3; x_train.^4];

B = inv(X_poly*X_poly')*X_poly*y_train';
%%
if r==1
    figure(3);clf; hold on;
    % plot(y_train'-X_poly'*B,'ko');
    plot(x_train,y_train,'ko')
    plot(x_train,X_poly'*B,'--r');
    title('OLS Regression')
    grid on; set(gca,'FontSize',20);
elseif r==2
     figure(3);clf; hold on;
    % plot(y_train'-X_poly'*B,'ko');
    plot3(x_train(1,:),x_train(2,:),y_train,'ko')
    plot3(x_train,X_poly'*B,'--r');
    title('OLS Regression')
    grid on; set(gca,'FontSize',20);
end

figure(4);clf; hold on;
plot(y_train'-X_poly'*B,'ko');
title('Residual - Act Subspace Linear Model')
grid on; set(gca,'FontSize',20);

%% Now look at doing MCMC with active subspace variances
%%
function out = act_subspace_f(q,IC,tspace,outflag,data)
param = exp(q);
% param = q;
[output,~] = call_CV_model(IC,param,tspace);

if outflag==1 % systolic LV pressure
    out = max(output.plv);
elseif outflag==2 %systolic Ao pressure
    out = max(output.pao);
elseif outflag==3 %diastolic Ao pressure
    out = min(output.pao);
elseif outflag==4 %residual function (assume pressure in the Aorta, aortic and mitral flow
    res1 = (data.pao - output.pao)./max(data.pao);
    res2 = (data.qav - output.qav)./max(data.qav);
    res3 = (data.qmv - output.qmv)./max(data.qmv);
    out = sum([res1 res2 res3].^2);
end

end
